// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Connection pooling configuration for performance (Requirement 7.4)
  // DATABASE_URL should use connection pooling (e.g., PgBouncer)
  // DIRECT_URL should be direct connection for migrations
}

model User {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String   @db.VarChar(255)
  email             String   @unique @db.VarChar(255)
  emailVerified     Boolean  @default(false) @map("email_verified")
  image             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Custom fields (preserved from old schema)
  // Note: passwordHash removed - passwords now stored in Account.password via Better Auth
  encryptionKeyHash String   @map("encryption_key_hash") @db.VarChar(255)
  gdprConsent       Json     @map("gdpr_consent") // { dataProcessing, marketing, analytics, consentedAt, ipAddress }

  // Better Auth relations
  sessions          Session[]
  accounts          Account[]
  
  // Existing relations
  notes             Note[]
  folders           Folder[]
  tags              Tag[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  token     String   @unique @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  userId    String   @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountId                String    @map("account_id") @db.VarChar(255)
  providerId               String    @map("provider_id") @db.VarChar(255)
  userId                   String    @map("user_id") @db.Uuid
  accessToken              String?   @map("access_token") @db.Text
  refreshToken             String?   @map("refresh_token") @db.Text
  idToken                  String?   @map("id_token") @db.Text
  accessTokenExpiresAt     DateTime? @map("access_token_expires_at") @db.Timestamptz(6)
  refreshTokenExpiresAt    DateTime? @map("refresh_token_expires_at") @db.Timestamptz(6)
  scope                    String?   @db.Text
  password                 String?   @db.Text
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String   @db.VarChar(255)
  value      String   @db.Text
  expiresAt  DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([identifier, value])
  @@map("verification")
}

model Note {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  folderId           String?  @map("folder_id") @db.Uuid
  title              String   @db.VarChar(255)
  transcription      String?  @db.Text
  summary            String?  @db.Text
  audioUrl           String?  @map("audio_url") @db.VarChar(500)
  encryptedAudioKey  String?  @map("encrypted_audio_key") @db.VarChar(255)
  duration           Int?     @db.Integer
  metadata           Json?
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder?   @relation(fields: [folderId], references: [id])
  tags   NoteTag[]

  // Indexes for performance optimization
  @@index([userId], name: "idx_notes_user_id")
  @@index([createdAt], name: "idx_notes_created_at")
  @@index([folderId], name: "idx_notes_folder_id")
  @@map("notes")
}

model Folder {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  parentId  String?  @map("parent_id") @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("FolderHierarchy")
  notes    Note[]

  // Indexes for performance optimization
  @@index([userId], name: "idx_folders_user_id")
  @@index([parentId], name: "idx_folders_parent_id")
  @@map("folders")
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes NoteTag[]

  // Indexes for performance optimization
  @@unique([userId, name])
  @@index([userId], name: "idx_tags_user_id")
  @@map("tags")
}

model NoteTag {
  noteId String @map("note_id") @db.Uuid
  tagId  String @map("tag_id") @db.Uuid

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@map("note_tags")
}

model AuditLog {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?   @map("user_id") @db.Uuid
  action       String    @db.VarChar(100)
  resourceType String    @map("resource_type") @db.VarChar(50)
  resourceId   String?   @map("resource_id") @db.Uuid
  details      Json?
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent") @db.Text
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Indexes for performance optimization
  @@index([userId], name: "idx_audit_logs_user_id")
  @@index([createdAt], name: "idx_audit_logs_created_at")
  @@index([resourceType], name: "idx_audit_logs_resource_type")
  @@map("audit_logs")
}